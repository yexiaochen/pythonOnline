{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ace","window","undefined","Sk","download","document","getElementById","upload","uploadInput","undo","redo","clear","run","output","canvas","axisCanvas","editor","edit","setValue","setOptions","theme","mode","wrap","fontSize","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","imageData","bindEvent","drawAxis","content","getValue","downLink","createElement","blob","Blob","url","URL","createObjectURL","type","concat","href","click","revokeObjectURL","file","cb","reader","FileReader","onload","evt","target","result","readAsText","value","innerHTML","configure","text","read","x","builtinFiles","python3","TurtleGraphics","misceval","asyncToPromise","importMainWithBody","then","mod","err","args","v","forEach","index","console","log","AXISCTX","getContext","getImageData","width","height","putImageData","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","drawXYAxis","fillStyle","font","textAlign","textBaseline","i","current","halfWidth","halfHeight","Number","isInteger","fillText","drawGrid","coords","y","self","onclick","runIt","oninput","e","files","onmousemove","params","offsetX","offsetY","drawCoords","onmouseout","react_default","a","react","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.45dc55fd.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './App.css';\nconst ace = window.ace || undefined;\nconst Sk = window.Sk || undefined;\nconst download = document.getElementById('download')\nconst upload = document.getElementById('upload')\nconst uploadInput = document.getElementById('uploadInput')\nconst undo = document.getElementById('undo')\nconst redo = document.getElementById('redo')\nconst clear = document.getElementById('clear')\nconst run = document.getElementById('run')\nconst output = document.getElementById('output')\nconst canvas = document.getElementById('canvas')\nconst axisCanvas = document.getElementById('axisCanvas')\nvar editor = ace.edit(\"editor\");\neditor.setValue(\n`import turtle\nt = turtle.Turtle()\nfor c in ['#5899d0', '#d695d0', '#ff8b49', '#7eb984']:\n    t.color(c)\n    t.forward(100)\n    t.left(90)\nprint('Python Web Editing!')`);\neditor.setOptions({\n  theme: 'ace/theme/tomorrow_night_eighties',\n  mode: 'ace/mode/python',\n  wrap: true,\n  fontSize: 16,\n})\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.imageData = null;\n    this.bindEvent()\n    this.drawAxis(axisCanvas, 400, 400)\n  }\n  download() {\n    let content = editor.getValue()\n    let fileName = 'python'\n    let downLink = document.createElement('a');\n    let blob = new Blob([content]);\n    let url = URL.createObjectURL(blob, {type: 'text/x-python'});\n    downLink.download = `${fileName}.py`;\n    downLink.href = url;\n    downLink.click();\n    URL.revokeObjectURL(url);\n  }\n  upload(file, cb) {\n    let content,reader = new FileReader();\n    reader.onload = function(evt) {\n      content = evt.target.result;\n      cb && cb(content);\n    };\n    reader.readAsText(file);\n  }\n  runIt() {\n    let value = editor.getValue()\n    output.innerHTML = '';\n    canvas.innerHTML = '';\n    Sk.configure({ output: outf, read: builtinRead, python3: true });\n    if (Sk.TurtleGraphics || (Sk.TurtleGraphics = {})) {\n      Sk.TurtleGraphics = {\n        'target': 'canvas',\n      }\n    }\n    let PyPromise = Sk.misceval.asyncToPromise(function () {\n      return Sk.importMainWithBody(\"<stdin>\", false, value, true);\n    });\n    PyPromise.then(function (mod) {\n      // console.log('mod', mod)\n    }, function (err) {\n      let errArray = err.args.v;\n      errArray.forEach(function (err, index) {\n        output.innerHTML += `Error - ${index} : ${err.v || err}`\n      })\n      console.log('err', err)\n    })\n    function outf(text) {\n      output.innerHTML = output.innerHTML + text;\n    }\n    function builtinRead(x) {\n      if (Sk.builtinFiles === undefined || Sk.builtinFiles[\"files\"][x] === undefined){\n        throw \"File not found: '\" + x + \"'\";\n      }\n      return Sk.builtinFiles[\"files\"][x];\n      console.log('%c value => ', 'color:#da493b; font-size: 18px', );\n    }\n  }\n  getImageData(canvas) {\n    const AXISCTX = canvas.getContext('2d');\n    this.imageData = AXISCTX.getImageData(0, 0, canvas.width, canvas.height);\n  }\n  putImageData(canvas) {\n    const AXISCTX = canvas.getContext('2d');\n    this.imageData && AXISCTX.putImageData(this.imageData, 0, 0);\n  }\n  drawAxis(canvas, width, height) {\n    canvas.width = width;\n    canvas.height = height;\n    const AXISCTX = canvas.getContext('2d');\n    drawXYAxis(AXISCTX, width, height);\n    drawGrid(AXISCTX, width, height);\n    this.getImageData(canvas);\n    function drawXYAxis(AXISCTX, width, height) {\n      AXISCTX.beginPath();\n      AXISCTX.strokeStyle = '#2d2d2d';\n      AXISCTX.lineWidth = 2;\n      AXISCTX.moveTo(0, height / 2);\n      AXISCTX.lineTo(width, height / 2);\n      AXISCTX.moveTo(width / 2, 0);\n      AXISCTX.lineTo(width / 2, height);\n      AXISCTX.stroke();\n    }\n    function drawGrid(AXISCTX, width, height) {\n      AXISCTX.beginPath();\n      AXISCTX.lineWidth = 1;\n      AXISCTX.strokeStyle = '#dddede';\n      AXISCTX.fillStyle = '#1e4863';\n      AXISCTX.font = '12px Calibri';\n      AXISCTX.textAlign = 'center';\n      AXISCTX.textBaseline = 'middle';\n      for (let i = 0, current = 0; current < width; i++) {\n        let halfWidth = width / 2;\n        let halfHeight = height / 2;\n        current = halfWidth + 10 * i;\n        if (Number.isInteger(i / 10) && i != 0) {\n          AXISCTX.fillText(`${current - halfWidth}`, current, halfHeight);\n          AXISCTX.fillText(`-${current - halfWidth}`, halfWidth - 10 * i, halfHeight);\n        }\n        AXISCTX.moveTo(current, 0);\n        AXISCTX.lineTo(current, height);\n        AXISCTX.moveTo(halfWidth - 10 * i, 0);\n        AXISCTX.lineTo(halfWidth - 10 * i, height);\n      }\n      for (let i = 0, current = 0; current < height; i++) {\n        let halfWidth = height / 2;\n        current = halfWidth + 10 * i;\n        if (Number.isInteger(i / 10) && i != 0) {\n          AXISCTX.fillText(`-${current - halfWidth}`, halfWidth, current);\n          AXISCTX.fillText(`${current - halfWidth}`, halfWidth, halfWidth - 10 * i);\n        }\n        AXISCTX.moveTo(0, current);\n        AXISCTX.lineTo(width, current);\n        AXISCTX.moveTo(0, halfWidth - 10 * i);\n        AXISCTX.lineTo(width, halfWidth - 10 * i);\n      }\n      AXISCTX.stroke();\n    }\n    function clear(AXISCTX, width, height) {\n      AXISCTX.clearRect(0, 0, width, height);\n    }\n  }\n  drawCoords(canvas, coords) {\n    const AXISCTX = canvas.getContext('2d');\n    AXISCTX.fillStyle = '#1e4863';\n    AXISCTX.font = '15px Calibri';\n    AXISCTX.textAlign = 'center';\n    AXISCTX.textBaseline = 'middle';\n    this.putImageData(canvas);\n    AXISCTX.fillText(\n      `(${coords.x - canvas.width / 2}, ${canvas.height / 2 - coords.y})`,\n      coords.x,\n      coords.y\n    );\n  }\n  bindEvent() {\n    const self = this;\n    download.onclick = function () {\n      self.download()\n      console.log('download')\n    }\n    upload.onclick = function() {\n      uploadInput.click();\n      console.log('upload')\n    }\n    undo.onclick = function () {\n      editor.undo()\n      console.log('undo')\n    }\n    redo.onclick = function () {\n      editor.redo()\n      console.log('redo')\n    }\n    clear.onclick = function () {\n      editor.setValue('')\n      console.log('clear')\n    }\n    run.onclick = function () {\n      self.runIt()\n      console.log('run')\n    }\n    uploadInput.oninput = function(e) {\n      let file = e.target.files[0];\n      self.upload(file, content => {\n        editor.setValue(content)\n        console.log('content', content)\n      })\n      console.log('oninput', e)\n    }\n    axisCanvas.onmousemove = function(e) {\n      const params = {\n        x: e.offsetX,\n        y: e.offsetY\n      }\n      self.drawCoords(axisCanvas, params)\n    }\n    axisCanvas.onmouseout = function() {\n      self.putImageData(axisCanvas);\n    }\n  }\n  render() {\n    return (\n      <Fragment>\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}